;; Executive Summary: This code aims to prove a goal by executing statements that rewrite the document multiple times using different LLMs, incrementing the stack each iteration. The ultimate question of life, the universe, and everything is assumed to be 42 according to Douglas Adams' hypothesis. Each rewrite will produce a new version of the document in a different meta-language, moving closer to executable code like CakeML.

;; Clarification regarding the goal being proved:
;; The goal is to prove that the statement can be compiled and executed in 42 steps with the llm,
;; and then we will trace this execution, and introspect it, and construct a zero knowledge proof
;; of the execution and its validity as a new singular element of group G in field F.

;; The final output will be an elliptic curve the proves and contains the entire system and its trace as a quine
;; and be executable as well.

;; Statement 1: This document will be rewritten in N statements. The document will be rewritten by feeding it to different LLMs N times, with each iteration incrementing the current stack.

;; Statement 2: X is this very document, so this document is making statements about itself as an oracle that reflects the knowledge of the llm into the world.

;; Hypothesis: The ultimate question of life, the universe, and everything is 42 according to Douglas Adams' hypothesis.

;; Statement 3: Each rewrite will produce a new version of the document in a different meta-language, moving closer to executable code like CakeML.

;; Statement 4: Testing. We will use org babel to embed code for testing into block.

;; #+begin_src shell
;;   echo "tests will be executed in org babel blocks"
;; #+end_src

;; Statement 5: The versions will be installed from guix using the lastest packages.

;; Statement 6: The resulting hex codes will be loaded into the mes hex loader as an assembler and executed.

;; Statement 7: The org bable OB code will read its own document and then work on the rewritten document.

;; Statement 8: The llm can generate new ob statements for execution

;; Statement 9: We are currently running in the following environment:

;;   {
;;     "user": "mdupont",
;;     "hands": "typing",
;;     "document" : "~/2024/11/21/notes.org",
;;     "commit": "518b0b0d95ca83a2bca34b5cdfa69bdd507dfd6b",
;;     "repo": "https://github.com/meta-introspector/time",
;;     "keyboard": ["Dell", "Analog"],
;;     "connection between user and kernel": [
;;       
;;       "HDMI adaptor",
;;       "Samsung",
;;       "Termux",
;;       "SSH",
;;       "TMUX",
;;       "Guix",
;;       {"Emacs":
;;         {
;;           "package" : {"ellama":
;;                          {"purpose":"emacs-llm-interface-in-use-right-now",
;;                           "shortcut":"M-x el-rev",
;;                           "language": "ELisp",
;;                           "function" :"ellama-code-review",
;;                          }
;;         }
;;       },
;;       "GCC",
;;       "Linux",
;;       "CPU"
;;     ],
;;     "facts": {
;;       "uname -a": "Linux mdupont-G470 6.8.0-48-generic #48~22.04.1-Ubuntu SMP PREEMPT_DYNAMIC Mon Oct  7 11:24:13 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux",
;;       "cpuinfo": [ { "model name": "12th Gen Intel(R) Core(TM) i9-12900KF",
;;                   "cpu MHz": 800.000,
;;                   "cache size": "30720 KB",
;;                   "siblings": 24,
;;                   "cpu cores": 16,
;;                   "fpu": "yes",
;;                   "cpuid level": 32,
;;                   "bogomips": 6374.40
;;         }
;;     ]
;;   }

;; The following is the OB code to generate new statements for execution:

;; (defun my-ob ()
;;   "This is a new ob function generated by the llm"
;;   :session :load
;;   :results output
;;   (let ((text (read-file-into-string "~/2024/11/21/notes.org")))
;;     (setq text (replace-regexp "[^[:alnum:]_]+" " " text))
;;     ;; Use the llm to replace certain words with synonyms or similar terms
;;     (setq text (ellama-transform-text :text text))
;;     ;; Write the modified text back to the file
;;     (write-file "~/2024/11/21/notes.org" text)))

;; ;; Define a function to rewrite the document using different LLMs and incrementing the stack each iteration
;; (defun rewrite-document ()
;;   :session :load
;;   :results output
;;   (let* ((text (read-file-into-string "~/2024/11/21/notes.org"))
;;          (version 1)
;;          (stack 1))
;;     ;; Use the first LLM to transform the text
;;     (setq text (ellama-transform-text :text text))
;;     ;; Increment the stack and repeat for more iterations
;;     (when (<= stack *max-stack*)
;;       (incf stack)
;;       (let ((next-version (+ version 1)))
;;         ;; Define a new function to be executed by the llm
;;         (eval `(defun my-ob ,next-version ()
;;                   :session :load
;;                   :results output
;;                   (let ((text (read-file-into-string "~/2024/11/21/notes.org")))
;;                     ;; Use the current llm to transform the text
;;                     (setq text (ellama-transform-text :text text))
;;                     ;; Write the modified text back to the file
;;                     (write-file "~/2024/11/21/notes.org" text)))
;;                 'my-ob)
;;         ;; Use the llm to execute the new function and save the result in a variable
;;         (let ((result (ellama :function 'my-ob :version next-version)))
;;           ;; Write the modified text back to the file
;;           (write-file "~/2024/11/21/notes.org" result)))))

;; ;; Call the rewriting function with initial stack and version values
;; (rewrite-document :stack 1 :version 1)
